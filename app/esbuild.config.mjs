/* eslint-disable no-inner-declarations */
import obPlugin from "./scripts/ob.esbuild.mjs";
import { build, context } from "esbuild";
import stylePlugin from "esbuild-style-plugin";
import { readFileSync } from "fs";
import { resolve, basename } from "path";
import semverPrerelease from "semver/functions/prerelease.js";
import NODE_BULTIIN from "builtin-modules";
import { readFile } from "fs/promises";

function isPreRelease() {
  const myPackage = JSON.parse(readFileSync("./package.json", "utf-8"));
  return semverPrerelease(myPackage.version) !== null;
}

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source visit the plugins github repository
*/
`;

const CM_BULTIIN = [
  "@codemirror/autocomplete",
  "@codemirror/collab",
  "@codemirror/commands",
  "@codemirror/language",
  "@codemirror/lint",
  "@codemirror/search",
  "@codemirror/state",
  "@codemirror/text",
  "@codemirror/view",
  "@lezer/common",
  "@lezer/lr",
  "@lezer/highlight",
  "@codemirror/closebrackets",
  "@codemirror/comment",
  "@codemirror/fold",
  "@codemirror/gutter",
  "@codemirror/highlight",
  "@codemirror/history",
  "@codemirror/matchbrackets",
  "@codemirror/panel",
  "@codemirror/rangeset",
  "@codemirror/rectangular-selection",
  "@codemirror/stream-parser",
  "@codemirror/tooltip",
];

const isProd = process.env?.BUILD === "production";

const randomUid = Math.random().toString(36).slice(2);

/** @type import("esbuild").BuildOptions */
const opts = {
  bundle: true,
  platform: "browser",
  format: "cjs",
  target: "es2020",
  mainFields: ["browser", "module", "main"],
  minify: isProd,
  define: {
    "process.env.NODE_ENV": JSON.stringify(process.env.BUILD ?? ""),
    "__DEV__": JSON.stringify(!isProd),
  },
  logLevel: isProd ? "silent" : "info",
  external: [
    "obsidian",
    "electron",
    "@electron/remote",
    ...CM_BULTIIN,
    ...NODE_BULTIIN,
  ],
  mainFields: ["browser", "module", "main"],
  sourcemap: isProd ? false : "inline",
  loader: {
    ".svg": "text",
    ".ejs": "text",
  },
  entryPoints: ["src/mx-main.ts"],
  banner: { js: banner },
  outfile: "dist/main.js",
  tsconfig: "tsconfig.json",
  plugins: [
    stylePlugin({
      postcssConfigFile: 'file:///'+resolve("./postcss.config.mjs"),
    }),
    obPlugin({ beta: isPreRelease() }),
    inlineCodePlugin(
      {
        external: ['media-extended', 'fs/promises', 'electron', 'path'],
        ...(isProd ? { drop: ["console"], } : {})
      }
    ),
    {
      name: "fix-media-captions", setup(build) {
        build.onLoad({ filter: new RegExp("media-captions/") }, async ({ path }) => {
          const code = await readFile(path, "utf-8");
          return { contents: code.replaceAll(/\b instanceof HTMLElement\b/g, ".instanceOf(HTMLElement)"), loader: "js" };
        })
      }
    }
  ],
};

if (!isProd) {
  const ctx = await context({ ...opts, logLevel: "error" });
  try {
    await ctx.watch();
  } catch (err) {
    console.error(err);
    await cleanup();
  }
  process.on("SIGINT", cleanup);
  async function cleanup() {
    await ctx.dispose();
    // scheduleOnDisposeCallbacks defer function calls using setTimeout(...,0)
    // so we need to wait a bit before exiting
    // setTimeout(() => process.exit(), 100);
  }
} else {
  await build(opts);
}

/**
 *
 * @param {Partial<import("esbuild").BuildOptions>} extraConfig
 * @returns {import("esbuild").Plugin}
 */
function inlineCodePlugin(extraConfig) {
  return {
    name: "inline-code",
    setup: (build) => {
      const codePrefixPattern = new RegExp(`^inline:`),
        namespace = "inline";
      build.onResolve(
        { filter: codePrefixPattern },
        ({ path: workerPath, resolveDir }) => {
          return {
            path: resolve(
              resolveDir,
              workerPath.replace(codePrefixPattern, "")
            ),
            namespace,
          };
        }
      );
      build.onLoad(
        { filter: /.*/, namespace },
        async ({ path: workerPath }) => {
          const code = await buildWorker(workerPath, extraConfig);
          console.log("inline code built")
          return {
            contents: code,
            loader: "text",
          };
        }
      )
    },
  };
}

async function buildWorker(
  workerPath,
  { entryPoints, outfile, outdir, ...extraConfig }
) {
  const scriptName = basename(workerPath).replace(/\.[^.]*$/, ".js");

  const result = await build({
    entryPoints: [workerPath],
    write: false, // write in memory
    outfile: scriptName,
    bundle: true,
    minify: true,
    format: "cjs",
    target: "es2022",
    ...extraConfig,
  });

  return result.outputFiles[0].text;
}